
--  tek satir aciklama

/*
	cok satirli aciklama
*/


--*****************************************
-- **************  DEĞİŞKEN TANIMLAMA *****************************
--*****************************************

do $$ 	-- anonim bir blok oldugunu gosterir
		-- dolar : ozel karakterler oncesinde tirnak isaretini kullanmamak icin

declare
	counter integer := 1;
	first_name varchar(50) := 'Ahmet';
	last_name varchar(50) := 'Gok';
	payment numeric(4,2):= 20.5 ; -- numeric(precision, scale)  20.5 ( precision --> 1,38)

begin

	raise notice '% % % has been paid % USD',
				counter,
				first_name,
				last_name,
				payment;

end $$ ;

-- Task 1 : değişkenler oluşturarak ekrana  Ahmet ve Mehmet beyler 120 tl ye 
--			bilet aldılar. cümlesini ekrana basınız...
do $$
declare

	first_person varchar(50) := 'Ahmet';
	second_person varchar(50) := 'Mehmet';
	payment numeric(3) := 120;

begin

	raise notice '% ve % Beyler % tl ye bilet aldilar',
					first_person,
					second_person,
					payment;

end $$;


--*****************************************
-- ********  BEKLETME KOMUDU *************************************
--*****************************************

do $$
declare

	create_at time := now();

begin

	raise notice '%', create_at;
	perform pg_sleep(5);  -- 5 saniye kodu bekletiyorum
	raise notice '%', create_at;
	
end $$;

--*****************************************
-- ******** TABLODAN DATA TİPİNİ KOPYALAMA *********************
--*****************************************

do $$
declare

	film_title film.title%type ; -- film_title --> text

begin

	-- 1 id li filmin ismini getirelim :
	select title
	from film
	into film_title -- film_title := 'Kuzularin Sessizligi'
	where id=1;
	
	raise notice 'Film tile with id 1 : %', film_title ;

end $$;

-- Task : 1 id li filmin turunu ekrana basalim : 

do $$
declare

	film_type film.type%type;

begin

	select type
	from film
	into film_type
	where id =1;
	
	raise notice 'Film type with id 1 : %', film_type;

end $$ ;

-- Task : 1 id li filmin ismini ve turunu ekrana basalim : 

do $$
declare

	film_title film.title%type;
	film_type film.type%type;

begin

	-- 1 id li filmin ismini getirelim
	select title
	from film
	into film_title
	where id=1;
	
	-- 1 id li filmin turunu getirelim
	select type
	from film
	into film_type
	where id=1;
	
	raise notice 'Film title with id 1 : % and type : %',
				film_title,
				film_type;

end $$;


-- yukardaki kodun kisa hali : 
do $$
declare

	film_title film.title%type;
	film_type film.type%type;

begin

	-- 1 id li filmin ismini getirelim
	select title,type
	from film
	into film_title,film_type
	where id=1;
	
		
	raise notice 'Film title with id 1 : % and type : %',
				film_title,
				film_type;

end $$;


--*****************************************
-- ***************** ROW TYPE **********************************************
--*****************************************

do $$
declare

	selected_film film%rowtype ;

begin

	-- 1 id li film getirelim
	select *
	from film
	into selected_film
	where id=1;
	
	raise notice 'The actor name is : % % % %', --- mapleme hatasi
			selected_film.id,
			selected_film.title,
			selected_film.type,
			selected_film.length;

end $$ ;


--*****************************************
-- ******* Record Type ************************************************
--*****************************************

do $$
declare

	rec record;

begin 

	select id, title, type 
	into rec
	from film
	where id=2;
	
	raise notice '% % %',
				rec.id,
				rec.title,
				rec.type;

end $$;


--*****************************************
-- ******** İç İÇE BLOK ************************************************
--*****************************************

do $$
<<outer_block>>
declare -- outer block

	counter integer := 0;

begin
	
	counter := counter +1 ;
	raise notice 'counter degerim : %', counter;
	
	declare -- inner block
		counter integer := 0;
	begin
		counter := counter + 10;
		raise notice 'ic blokdaki counter degerim : %', counter;
		raise notice 'dis blokdaki counter degerim : %', outer_block.counter;
	
	end; -- inner block sonu
	
		raise notice 'dis blokdaki counter degerim : %', counter ;

end $$; -- outer block sonu



--*****************************************	
-- ********** Constant *********************************************** 
--*****************************************

-- selling_price := net_price * 0.1 ;
-- selling_price := net_price * vat ;

do $$
declare

	vat constant numeric := 0.1 ; 
	net_price numeric := 20.5;

begin

	raise notice 'Satis fiyati : %', net_price*(1+vat);
	-- vat := 0.05;   constant bir ifadeyi degistirmeye calisirsak hata aliriz

end $$ ;

-- constant bir degeri RT de deger verebilir miyim ??

do $$
declare

	start_at constant time := now();

begin

	raise notice 'blogun calisma zamani : %', start_at;

end $$ ;


-- //////////////////// Control Structures ///////////////////////


--*****************************************
-- ******************** If Statement ****************
--*****************************************

-- syntax : 

/*
	if condition then
		statement;
	end if ;
*/

-- Task : 0 id li filmi bulalım eğer yoksa ekrana uyarı yazısı verelim: 
do $$
declare

	selected_film film%rowtype;
	input_film_id film.id%type := 0;

begin

	select * from film
	into selected_film
	where id = input_film_id;
	
	if not found then
		raise notice 'Girdiginiz id li film bulunamadi : %' , input_film_id; -- statement
	end if;

end $$ ;

--*****************************************
-- ************** IF-THEN-ELSE *************************
--*****************************************


-- syntax :

/*

	IF condition THEN
		statements ;
	ELSE
		alternative-statements;
	END IF ;

*/

-- Task: 2 id li filmi bulalim, eger yoksa ekrana uyari yazalim, varsa da ismini ekrana yazalim

do $$

declare

	selected_film film%rowtype ;
	input_film_id film.id%type := 0 ;

begin

	select * from film
	into selected_film
	where id = input_film_id ;
	
	if not found then
		raise notice 'Girmis oldugunuz id li film bulunamadi : %' , input_film_id;
	else
		raise notice 'Filmin ismi : %' , selected_film.title;
    end if ;

end $$ ;

-- Task :  eger film tablosu bos degilse (count methodu ile)  film tablosuna id,title degerlerini 
--			ayarliyarak yeni veri girisini yapan kodu yazalim

do $$

declare
	
	count_rows integer ;

begin

	select count(*) 
	into count_rows
	from film;
	
	if count_rows > 0 then
		insert into film (id,title)
		values (5, 'Kara Sahin Dustu');
		
		raise notice 'Yeni veri eklendi';
	else
		raise notice 'Filim tablosu bos';
	end if ;

end $$;

--*****************************************
-- ************* IF-THEN-ELSE-IF ******************************
--*****************************************


-- syntax :

/*

	IF condition_1 THEN 
			statement_1;
		ELSE IF condition_2 THEN
			statement_2;
			...
		ELSE IF condition_n THEN
			statment_n;
		ELSE 
			else_statement;
		END IF ;
		
*/

/*
 	Task : 1 id li film varsa ; 
			süresi 50 dakikanın altında ise Short, 
			50<length<120 ise Medium, 
			length>120 ise Long yazalım
*/

do $$

declare

	v_film film%rowtype; -- 1 id li filmi bu degisken uzerinden tutacagim
	len_description varchar(50); -- film uzunluk bilgisini bu degisken ile takip edecegiz

begin

	select * from film
	into v_film
	where id =1;
	
	if not found then
		raise notice 'Filim bulunamadi';
	else 
		if v_film.length>0 and v_film.length <=50 then
					len_description='Kisa';
				elseif v_film.length>50 and v_film.length<120 then
					len_description='Orta';
				elseif v_film.length>=120 then
					len_description='Uzun';
				else
					len_description='Tanimlanamiyor';
		 end if;
	 raise notice ' % filmin suresi : %', v_film.title, len_description;
	 end if;

end $$ ;

--*****************************************
-- ******** Case Statement **************************
--*****************************************

--syntax :


/*

		CASE search-expression
			WHEN expression_1 [, expression_2] THEN
				statement;
			[..]
			[else
			    else-statement]
		END CASE;
*/


-- Task : Filmin türüne göre çocuklara uygun olup olmadığını ekrana yazalım

do $$

declare

	tur film.type%type;
	uyari varchar(50);

begin 

	select type from film
	into tur
	where id = 5;
	
	if found then
		case tur 
			when 'Korku' then
				uyari = 'Cocuklar icin uygun degil';
			when 'Macera' then
				uyari = 'Cocuklar icin uygun';
			when 'Animasyon' then
				uyari = 'Cocuklar icin tavsiye edilir';
			else
				uyari = 'Tanimlanamadi';
		end case;
		raise notice '%' , uyari;
	end if;

end $$;

--*****************************************
--************** LOOP *************************************
--*****************************************

-- syntax : 

/*
	<<label>>
	LOOP
		statement;
		
	END LOOP ;
	
	
	--> loop u sonlandirmaK icin if yapisini kullanabiliriz
	
	<<label>>
	LOOP
		statement;
		IF condition THEN
			exit;
		END IF;
     END LOOP ;
	 
	 --> nested loop 
	 
	 <<outer>>
	 LOOP
	 	statement;
		<<inner>>
		LOOP
			statement_2;
			exit <<inner>>
		END LOOP;
	 END LOOP;
*/


-- Task : Fibonacci Sayilari : 1, 1, 2, 3, 5, 8, .....

do $$

declare

	n integer := 3;
	counter integer := 0;
	i integer := 0;
	j integer := 1;
	fib integer := 0;

begin

	if(n<1) then
		fib:=0;
	end if;
	
	loop 
		exit when counter = n ;
		counter := counter + 1 ;
		select j, i+j into i,j;  -- 1, 1, 2, 3, 5, 8, 13, 21, ....
	end loop;
	fib:=i;
	raise notice '%', fib;

end $$ ;


--Task 1 : Film tablosundaki film sayısı 10 dan az ise "Film sayısı az" 
--			yazdırın, 10 dan çok ise "Film sayısı yeterli" yazdıralım


do $$

declare

	sayi integer := 0;

begin

	select count(*)
	from film
	into sayi;
	
	if (sayi<10) then
		raise notice 'Film sayisi az';
	else
		raise notice 'Film sayisi yeterli';
	end if;

end $$ ;

-- Task 2: user_age isminde integer data türünde bir değişken tanımlayıp default olarak bir değer verelim, 
--			If yapısı ile girilen değer 18 den büyük ise Access Granted, küçük ise Access Denied yazdıralım

do $$

declare

	user_age integer := 25;

begin

	if user_age>18 then
		raise notice 'Access Granted';
	end if;
	
	if user_age < 18 then
		raise notice 'Access Denied';
	end if;

end $$ ;

-- Task 3 ( odev ): a ve b isimli integer türünde 2 değişken tanımlayıp default değerlerini verelim, 
--	eğer a nın değeri b den büyükse "a , b den büyüktür" yazalım, tam tersi durum için "b, a dan büyüktür" 
--	yazalım, iki değer birbirine eşit ise " a,  b'ye eşittir" yazalım: 


-- Task 4 : 1 dan 4 e kadar counter değerlerini ekrana basalım

do $$
declare
	n integer := 4;
	counter integer := 0;
begin
	
	loop
		exit when counter = n ;
		counter := counter + 1 ;
		raise notice '%',counter;
	end loop;
end $$ ;

--2. yol : 

do $$

declare 

	n integer := 4;
	counter integer :=0;

begin 

	while counter <n loop  -- if ile sonsuz donguden kurtulmak yerine while da kullanilabilir
		counter := counter +1 ;
		raise notice 'Counter %', counter;
		
	end loop;

end $$ ;

-- 3.yol :

do $$

declare

	counter integer :=1;	

begin

	while counter < 5 loop
		raise notice 'counter %', counter;
		counter := counter +1;
	end loop ;

end $$;


-- Task 5 : sayac isminde bir degisken olusturun ve dongu icinde sayaci birer artirin, 
--	her dongude sayacin degerini ekrana basin ve sayac degeri 5 e esit olunca donguden cikin

do $$

declare

	counter integer := 0;

begin
	loop
		raise notice '%', counter;
		counter := counter +1 ;
		exit when counter = 5;
	end loop;
end $$ ;

-- ****************************************************************
-- 	  **************  FOR LOOP *********************
--*****************************************************************

-- syntax :

/* 

	FOR loop_counter IN [reverse] FROM..TO [By step] LOOP
		statement;
	END LOOP;
	
*/

-- Ornek (IN)

do $$ 

begin

	for counter in 1..5 loop 
		raise notice 'counter : %', counter;
	end loop;

end $$ ;

-- Ornek ( reverse )

do $$

begin

	for counter in reverse 5..1 loop
		raise notice 'counter : %', counter;
	end loop;
end $$;

-- Ornek (by)

do $$ 

begin 

	for counter in 1..10 by 2 loop
		raise notice 'counter : %', counter;
	end loop ;
end $$;

-- Task : 10 dan 20 ye kadar 2 ser 2 ser ekrana sayilari basalim : 

do $$

begin

	for counter in 10..20 by 2 loop
		raise notice 'Counter : %', counter ;
	end loop ;

end $$ ;


-- Ornek : DB de loop kullanimi

-- syntax :

/*

	FOR target IN query loop
		statement;
	END LOOP;
	
*/

-- Task : Filmleri süresine göre sıraladığımızda en uzun 2 filmi gösterelim

do $$

declare

	f record;

begin

	for f in select title, length
				from film
				order by length desc
				limit 2			
	loop
		raise notice '% ( % dakika)', f.title,f.length ;
	end loop;

end $$ ;


-- ********************************

CREATE TABLE employees (
  employee_id serial PRIMARY KEY,  
  full_name VARCHAR NOT NULL,
  manager_id INT
);

INSERT INTO employees (
  employee_id,
  full_name,
  manager_id
)
VALUES
  (1, 'M.S Dhoni', NULL),
  (2, 'Sachin Tendulkar', 1),
  (3, 'R. Sharma', 1),
  (4, 'S. Raina', 1),
  (5, 'B. Kumar', 1),
  (6, 'Y. Singh', 2),
  (7, 'Virender Sehwag ', 2),
  (8, 'Ajinkya Rahane', 2),
  (9, 'Shikhar Dhawan', 2),
  (10, 'Mohammed Shami', 3),
  (11, 'Shreyas Iyer', 3),
  (12, 'Mayank Agarwal', 3),
  (13, 'K. L. Rahul', 3),
  (14, 'Hardik Pandya', 4),
  (15, 'Dinesh Karthik', 4),
  (16, 'Jasprit Bumrah', 7),
  (17, 'Kuldeep Yadav', 7),
  (18, 'Yuzvendra Chahal', 8),
  (19, 'Rishabh Pant', 8),
  (20, 'Sanju Samson', 8);

-- Task :  manager ID si en buyuk ilk 10 kisiyi ekrana yazalim 

do $$
declare
	f record;
begin
	for f in select full_name, manager_id
				from employees
				order by manager_id desc
				limit 10			
	loop
		raise notice '% ( %  )', f.full_name,f.manager_id ;
	end loop;
end $$;


-- *********************************************************************
-- 		***************** EXIT *****************
-- *********************************************************************

exit when counter > 10 ;


-- yukardaki ile asagidaki ayni isi yapiyor, ust tarafdakini tercih edelim


if counter > 10 then 
	exit ;
end if ;



-- *********************************************************************
-- 		************ CONTINUE ******************
-- *********************************************************************


-- mevcut iterasyonu  atlamak icin kullanilir

-- syntax :
 
-- continue [loop_label] [when condition] 


-- Task : continue yapisi kullanarak 1 dahil 10 a kadar olan tek sayilari ekrana basalim

do $$

declare

	counter integer := 0;

begin 

	loop 
		counter := counter +1 ;
		exit when counter > 10 ;
		continue when mod(counter, 2)=0; -- counter degerim cift sayi ise bu iterasyonu atla
		raise notice '%',counter;
	end loop ;
end $$ ;

-- *********************************************************************	
--  	********************* FUNCTION ***********************
-- *********************************************************************

-- syntax :


	create [or replace] function function_name(param_list)-- fonksiyon ismi ve parametrelerini setliyorum
		returns return_type -- donen data turunu belirtiyorum
		language plpgsql -- PL-JAVA / PL-Python
		as
	$$
	declare
		-- degisken tanimlama
	begin
		-- logic
	end $$;
	
-- Film tablomuzdaki filmlerin sayisini getiren bir fonsiyon yazalim

create function get_film_count(len_from int, len_to int)
	returns integer
	language plpgsql
	as
	$$
	declare
	
		film_count integer ;
	
	begin
	
		select count(*)
		into film_count
		from film
		where length between len_from and len_to;
		
		return film_count;
	
	end $$ ;


select get_film_count(40,190);













































































































